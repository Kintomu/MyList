@page "/AddGift"
@using Microsoft.EntityFrameworkCore
@using MyList.Data_Access
@using MyList.Models
@rendermode InteractiveServer
@inject GiftListContext _context


<h1>Manage Lists</h1>
<div class="row">
    <div class="col-md-12">
        <div class="form-group">
            <label for="listName">List Name:</label>
            <input type="text" class="form-control w-50" id="listName" @bind="listName"/>
        </div>
        <button class="btn btn-primary" @onclick="AddList">Add List</button>

        <div class="form-group">
            <label for="existingList">Select List:</label>
            <select id="existingList" class="form-control w-50" @bind="selectedListName"
                    @oninput="OnSelectedListChanged">
                <option value="">-- Select a list --</option>
                @foreach (var listName in existingListNames)
                {
                    <option value="@listName">@listName</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="newItemName">Item Name:</label>
            <input type="text" class="form-control w-50" id="newItemName" @bind="newItemName"/>
        </div>
        <div class="form-group">
            <label for="newItemDescription">Item Description:</label>
            <input type="text" class="form-control w-50" id="newItemDescription" @bind="newItemDescription"/>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="newIsPurchased" @bind="newIsPurchased"/>
            <label class="form-check-label" for="newIsPurchased">Is Done</label>
        </div>
        <button class="btn btn-primary" @onclick="AddNewItemToList">Add Item to List</button>
    </div>
</div>


@* ... (rest of your code remains the same) ... *@


@* Success/failure message *@
@if (showMessage)
{
    <div class="alert @messageClass" role="alert">
        @message
    </div>
}



@code {
    private string listName = "";
    private string itemName = "";
    private string itemDescription = "";
    private bool isPurchased = false;
    private string newItemName = "";
    private string newItemDescription = "";
    private bool newIsPurchased = false;

    // For existing items
    private List<string> existingListNames = new();
    private string selectedListName = "";
    private List<string> existingItems = new();
    private string selectedItemName = "";
    private bool updatedIsPurchased = false;

    // For success/failure message
    private bool showMessage = false;
    private string message = "";
    private string messageClass = "";

    protected override async Task OnInitializedAsync()
    {
        // Fetch existing list names
        existingListNames = await _context.GiftLists
            .Select(g => g.ListName)
            .Distinct()
            .ToListAsync();
    }

    private async Task AddList()
    {
        showMessage = false;

        try
        {
            var newList = new GiftList
            {
                ListName = listName,
                GiftName = "", // You might need to adjust these 
                GiftDescription = "", // based on your model's requirements
                IsPurchased = false
            };

            _context.GiftLists.Add(newList);
            await _context.SaveChangesAsync();

            message = "List added successfully!";
            messageClass = "alert-success";
            showMessage = true;

            listName = "";

            // Refresh existing list names
            existingListNames = await _context.GiftLists
                .Select(g => g.ListName)
                .Distinct()
                .ToListAsync();
        }
        catch (Exception ex)
        {
            // TODO: ADD Logger - Failure message
            message = "Error adding list: " + ex.Message;
            messageClass = "alert-danger";
            showMessage = true;
        }
    }

    private async Task AddNewItemToList()
    {
        showMessage = false;

        try
        {
            var newGiftList = new GiftList
            {
                ListName = selectedListName, // Add to the selected list
                GiftName = newItemName,
                GiftDescription = newItemDescription,
                IsPurchased = newIsPurchased
            };

            _context.GiftLists.Add(newGiftList);
            await _context.SaveChangesAsync();

            message = "Item added to list successfully!";
            messageClass = "alert-success";
            showMessage = true;

            newItemName = "";
            newItemDescription = "";
            newIsPurchased = false;
        }
        catch (Exception ex)
        {
            // TODO: ADD Logger - Failure message
            message = "Error adding item to list: " + ex.Message;
            messageClass = "alert-danger";
            showMessage = true;
        }
    }

    private async Task OnSelectedListChanged()
    {
        if (!string.IsNullOrEmpty(selectedListName))
        {
            // Fetch the items for the selected list
            existingItems = await _context.GiftLists
                .Where(g => g.ListName == selectedListName)
                .Select(g => g.GiftName) // Select the GiftName for each item
                .ToListAsync();
        }
        else
        {
            existingItems.Clear();
        }
    }

}