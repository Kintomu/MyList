@page "/Gifts"
@using Microsoft.EntityFrameworkCore
@using MyList.Data_Access
@using MyList.Models
@attribute [StreamRendering]
@inject GiftListContext Context
@inject IJSRuntime JsRuntime

@if (false)
{
    <p>Loading...</p>
}
<h1>My Lists</h1>

<button @onclick="ExportToCsv" class="btn btn-primary">Export to CSV</button>

@foreach (var group in _giftLists!.GroupBy(g => g.ListName))
{
    <h3>@group.Key</h3>
    <ul>
        @foreach (var gift in group)
        {
            if (!string.IsNullOrEmpty(gift.GiftName))
            {
                <li>
                    <input type="checkbox" @bind="gift.IsPurchased" @oninput="(async () => await UpdateGift(gift))"/>
                    <strong>@gift.GiftName</strong> - @gift.GiftDescription
                </li>
            }
        }
    </ul>
}

@code {
    private List<GiftList>? _giftLists;

    protected override async Task OnInitializedAsync()
    {
        _giftLists = await Context.GiftLists.ToListAsync();
    }

    private async Task UpdateGift(GiftList gift)
    {
        Context.Entry(gift).State = EntityState.Modified;
        await Context.SaveChangesAsync();
    }

    private async Task ExportToCsv()
    {
        await JsRuntime.InvokeVoidAsync("exportToCSV", _giftLists);
    }

}

<script>
    function exportToCSV(giftLists) {
        console.log("Received giftLists:", giftLists);
        let csvContent = "ListName,GiftName,GiftDescription,IsPurchased\n";

        giftLists.forEach(gift => {
            if (gift.giftName) {
                csvContent += `${gift.listName},${gift.giftName},${gift.giftDescription},${gift.isPurchased}\n`;
            }
        });

        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", 'data:text/csv;charset=utf-8,' + encodedUri);
        link.setAttribute("download", "MyList.csv");
        document.body.appendChild(link);
        link.click();
    }
</script>